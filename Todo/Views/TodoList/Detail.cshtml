@using Todo.Controllers
@using Todo.Data.Entities
@using Todo.Services
@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
@model Todo.Models.TodoLists.TodoListDetailViewmodel

@{
    ViewData["Title"] = $"List: {Model.Title}";
    var loggedInGravatarHash = Gravatar.GetHash(UserManager.GetUserName(User));
}

<h2>@ViewData["Title"]</h2>

<div class="col-md-6">
    <p>
        <a asp-action="Index" asp-controller="TodoList">
            &lt;- Back to list
        </a>
    </p>
    <p>
        <a asp-action="Detail" asp-controller="TodoList" asp-route-orderByRank="@(!Model.OrderByRank)" asp-route-todoListId="@Model.TodoListId">
            <strong>@(Model.OrderByRank ? "Order by importance" : "Order by rank")</strong>
        </a>
    </p>

    <ul class="list-group">

        <li class="list-group-item">
            <a asp-action="Create" asp-controller="TodoItem" asp-route-todoListId="@Model.TodoListId">
                <strong>Add New Item</strong>
            </a>
        </li>

        @foreach (var item in Model.GetItemsSorted())
        {
            string contextualClass;
            switch (item.Importance)
            {
                case Importance.High:
                    contextualClass = "list-group-item-danger";
                    break;
                case Importance.Low:
                    contextualClass = "list-group-item-info";
                    break;
                default:
                    contextualClass = "";
                    break;
            }

            <li class="list-group-item @contextualClass @(item.IsDone ? "done" : String.Empty)">

                <div class="row">

                    <div class="col-md-8">
                        <p>
                            <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">

                                @if (item.IsDone)
                                {
                                    <s>@item.Title</s>
                                }
                                else
                                {
                                    <text>@item.Title</text>
                                }
                            </a>
                        </p>
                        <i>Rank:</i> <span>@item.Rank</span>
                    </div>

                    <div class="col-md-4 text-right">
                        <small>
                            @item.ResponsibleParty.UserName <span class="gravatar-name" data-gravatar-hash="@item.ResponsibleParty.GravatarHash" style="display:none"></span>

                            <img src="https://www.gravatar.com/avatar/@(item.ResponsibleParty.GravatarHash)?s=30" alt="avatar" />

                        </small>
                    </div>
                </div>

            </li>
        }
    </ul>

    @if (Model.HasDoneItems())
    {
        <div class="checkbox">
            <label>
                <input type="checkbox" onclick="javascript: $('.list-group li.done').toggleClass('hide')"> Hide items that are marked as done
            </label>
        </div>
    }

    @section Scripts {
        @foreach (var h in Model.GetDistinctGravatarHashes(new string[] { loggedInGravatarHash }))
        {
            <script type="text/javascript" src="https://www.gravatar.com/@(h).json?callback=GravatarApiWrapper.InjectGravatarProfileData"></script>
        }
    }
</div>